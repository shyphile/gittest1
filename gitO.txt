安装完成后 配置使用者参数
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

在空文件夹里 初始化成空的版本库
$ git init

保存修改到暂存区
$ git add fileName.txt

将保存到暂存区的修改提交到分支上存储
$ git commit -m "修改说明"

以下命令等同以上两条命令单独执行
$ git commit -a -m "14"

查看仓库当前的状态
git status

看版本库与工作区内容的不同
$ git diff readme.txt 

查看提交的各个版本
git log
git log --pretty=oneline 简化查看各个版本

退回到上一个版本
$ git reset --hard HEAD^

退回到上N处版本
$ git reset --hard HEAD~N

根据commit id 回退指定版本
例:$ git reset --hard 3628164

查询每一次命令 可以找回已经失踪的commit id 以便退回的版本往前进
$ git reflog

丢弃工作区的更改  如果工作区内容修改前暂存区是空的 就恢复到版本库里最近的一个版本;如果修改前暂存区有内容 就恢复成暂存区存储的内容  
例:$ git checkout -- gitO.txt

还有一种情况 是修改已经提交到暂存区 未提交到版本库的 用以下命令删除暂存区提交的内容,本地修改的内容不变.若想本地内容还原成未修改前,用上面的命令
例:$ git reset HEAD gitO.txt

用于删除本地仓库文件夹里的文件 并提交给暂存区  还是要使用git commit 提交给版本库     
$ git rm test.txt  本命令主要是应用到文件的删除 而不是内容的更改  因为git add 是文件存在情况下提交修改的内容

生成ssh密钥 密钥存在路径 一般是"C:\Users\Administrator\.ssh"文件夹下
$ ssh-keygen -t rsa -C "youremail@example.com"

关联一个远程仓库
$ git remote add origin git@github.com:michaelliao/learngit.git

关联后 第一次推送master分支的所有内容 -u主要是分为了建立本力与远程master分支的联系
$ git push -u origin master

首次以后推送master分支的所有内容
$ git push origin master

远程已有版本库的 克隆到本地的命令
例:$ git clone git@github.com:shyphile/test05260.git

分支的理解:假如项目在一起开发 你负责的功能没有写完 所以暂时不能提交到master上 因为你若提交了 别人获取时 得到是一个没写完的功能 影响程序编写
		   但是你又需要先提交到云端保存 以免存在本地的风险 这时你就可以建立个分支 将你未写完的功能先提交到这个分支上  这个分支属于你 别人不会
		   获取到 等你哪天在这个分支上将功能写完了 再将本分支和master合并 
		   
创建dev分支，然后切换到dev分支		   
$ git checkout -b dev  
等同以下两条命令单独执行
$ git branch dev
$ git checkout dev

查看分支
git branch

合并指定分支到当前分支
$ git merge dev

合并完成后，删除dev分支123
$ git branch -d dev












可以将一个文件夹直接提交 这样他里面所有内容也提交了